
import java_cup.runtime.*;
import erros.ListaErros;

/* CODIGO ADICIONAL */
parser code
{:    

    //chamada pelo proprio PARSER quando encontra um error
	public void syntax_error(Symbol s){    
        this.defineErro(s.left, s.right);   
        //s.left retorna a linha
        //s.right retorna a coluna             
	}	

    public void unrecovered_syntax_error(Symbol cur_token){


    }

    public void defineErro(int linha, int coluna, String texto)
	{   // Forma de acessar o Analisador Léxico da classe Parser 
            // É necessário o casting >>> (scanner.Scanner) this.getScanner()
            //pois o scanner da classe Parser é o do pacote java_cup.runtime.Scanner, 
            //portanto, é obrigatório fazer este casting aqui e toda vez que quisermos acessar o Yylex 
            scanner.Scanner sc = (scanner.Scanner) this.getScanner();  
            sc.defineErro(linha, coluna, texto);
	}		

    //usado pelo método syntax_error()
    public void defineErro(int linha, int coluna){   
            scanner.Scanner sc = (scanner.Scanner) this.getScanner();  
            sc.defineErro(linha, coluna);
	}

    //usado para completar o texto daqueles erros adicionados pelo método syntax_error()
	public void defineErro(String texto){  
            scanner.Scanner sc = (scanner.Scanner) this.getScanner();  
            sc.defineErro(texto);
	}
:};

/*TERMINAIS */
terminal MAIOR, MENOR, MAIORIGUAL, MENORIGUAL, IGUALIGUAL, DIF;
terminal PTVIRG, MAIS, MENOS, MULT, DIV, KW_IF, KW_ELSE,KW_WHILE, KW_DO, ABREPAR, FECHAPAR, ABRECHAVE, FECHACHAVE;
terminal Double NUMBER;

/*NÃO TERMINAIS */
non terminal Double expr_list, expr_ptv, expr, factor, term, condicao, if,do_while, while, op_Relacional, statement;
non terminal else;


statement ::=

        
        do_while
        |
        while
        |
        if
        |
        expr_list
        ;

do_while ::=
        
          KW_DO 
          ABRECHAVE
            expr_list
          FECHACHAVE
          KW_WHILE ABREPAR condicao FECHAPAR
         |
            error
            {: parser.defineErro("Do While incompleto"):}
         ;   

while ::=

        KW_WHILE ABREPAR condicao FECHAPAR 
        ABRECHAVE
            expr_list
        FECHACHAVE
        |
         error
            {: parser.defineErro("While incompleto"):}
        ;

if ::= 
		    KW_IF ABREPAR condicao FECHAPAR 
            ABRECHAVE 
            expr_list 
            FECHACHAVE 
            else
        |  error {: parser.defineErro("IF incompleto"); :}   
        ;

      /* 
         //esta forma é criando regras erradas para cada erro do programador
         //Pode ser interessante para alguns casos, porem ineficiente para          
        |   
            KW_IF ABREPAR condicao FECHAPAR:e  
            {: parser.defineErro(eleft, eright, "sem abre chaves"); :}                      
            expr_list 
            FECHACHAVE 
            else 
       |   
            KW_IF condicao:e 
            {: parser.defineErro(eleft, eright, "IF sem parenteses "); :} 
            ABRECHAVE                       
            expr_list 
            FECHACHAVE 
            else
            
        */
       

else ::= 
           KW_ELSE ABRECHAVE expr_list FECHACHAVE              
        | 
            /*vazio */        
        ;

condicao ::= 
            expr op_Relacional expr
        //| error {: parser.defineErro("condicao com erro"); :} //resposta exercicio 
            ;
				

expr_list ::=
                expr_list expr_ptv
            | 
                expr_ptv
            ;

expr_ptv ::=
                expr PTVIRG
        |              
            error {: parser.defineErro("Expressao incompleta"); :} 
            //PTVIRG // se colocar ele tentará se recuperar qdo achar um PTVIRG
        ;

expr  	 ::=  
                expr MAIS term		          	
            | 
                expr MENOS term		                
            | 
                MENOS term
            | 
                term 			
			;
		          
term     ::= 
                factor MULT term
	        | 
                factor:f DIV term:t
                {: 
                    if(t == 0){
                        parser.defineErro(tleft, tright, "Error – Divisao por zero."); 
                    }
                    RESULT = f/t;
                :}
	        | 
                factor:f
			        {: RESULT = f; :}			
			;

factor    ::=  
                NUMBER:n 
				{: RESULT = n; :}
 	      	| 
                ABREPAR expr FECHAPAR				
			;

op_Relacional ::= 
                MAIOR
            | 
                MENOR
            |
                MAIORIGUAL
            |   
                MENORIGUAL
            | 
                IGUALIGUAL
            | 
                DIF
            | 
                error 
                {: 
                    parser.defineErro("Operador relacional desconhecido");  
                :}
            ;