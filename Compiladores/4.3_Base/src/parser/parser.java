
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.Scanner;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\003\003\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\011\002\000\002\010\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\004\000" +
    "\002\004\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\003\000\002\006\003\000\002\006" +
    "\005\000\002\006\003\000\002\012\002\000\002\007\007" +
    "\000\002\007\005\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\043\000\012\006\005\013\004\014\011\021\007\001" +
    "\002\000\026\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\015\uffed\016\uffed\017\uffed\001\002\000" +
    "\010\013\004\014\011\021\007\001\002\000\014\002\001" +
    "\006\005\013\004\014\011\021\007\001\002\000\022\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\015\ufff3" +
    "\017\ufff3\001\002\000\014\004\ufff8\005\ufff8\006\ufff8\015" +
    "\ufff8\017\ufff8\001\002\000\012\006\005\013\004\014\011" +
    "\021\007\001\002\000\004\002\041\001\002\000\026\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\034" +
    "\015\ufff1\016\033\017\ufff1\001\002\000\014\002\ufffe\006" +
    "\ufffe\013\ufffe\014\ufffe\021\ufffe\001\002\000\022\004\ufff4" +
    "\005\ufff4\006\ufff4\007\027\010\026\011\025\015\ufff4\017" +
    "\ufff4\001\002\000\010\004\ufffd\005\017\006\021\001\002" +
    "\000\010\013\004\014\011\021\007\001\002\000\004\004" +
    "\023\001\002\000\010\013\004\014\011\021\007\001\002" +
    "\000\014\004\ufffa\005\ufffa\006\ufffa\015\ufffa\017\ufffa\001" +
    "\002\000\014\002\ufffc\006\ufffc\013\ufffc\014\ufffc\021\ufffc" +
    "\001\002\000\014\004\ufffb\005\ufffb\006\ufffb\015\ufffb\017" +
    "\ufffb\001\002\000\010\013\004\014\011\021\007\001\002" +
    "\000\010\013\004\014\011\021\007\001\002\000\010\013" +
    "\004\014\011\021\007\001\002\000\014\004\ufff6\005\ufff6" +
    "\006\ufff6\015\ufff6\017\ufff6\001\002\000\014\004\ufff7\005" +
    "\ufff7\006\ufff7\015\ufff7\017\ufff7\001\002\000\014\004\ufff5" +
    "\005\ufff5\006\ufff5\015\ufff5\017\ufff5\001\002\000\012\006" +
    "\005\013\004\014\011\021\007\001\002\000\004\013\035" +
    "\001\002\000\026\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\015\uffee\016\uffee\017\uffee\001\002" +
    "\000\010\005\017\006\021\017\ufff0\001\002\000\004\017" +
    "\040\001\002\000\026\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\015\uffef\016\uffef\017\uffef\001" +
    "\002\000\004\002\000\001\002\000\010\005\017\006\021" +
    "\015\043\001\002\000\022\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\015\ufff2\017\ufff2\001\002\000\014" +
    "\002\uffff\006\uffff\013\uffff\014\uffff\021\uffff\001\002\000" +
    "\014\004\ufff9\005\ufff9\006\ufff9\015\ufff9\017\ufff9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\043\000\020\002\005\003\011\004\015\005\007\006" +
    "\014\007\012\010\013\001\001\000\002\001\001\000\010" +
    "\005\044\006\014\007\012\001\001\000\014\004\015\005" +
    "\007\006\014\007\012\010\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\041\005\007\006\014\007" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\017\001\001\000" +
    "\010\005\023\006\014\007\012\001\001\000\002\001\001" +
    "\000\010\005\021\006\014\007\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\031" +
    "\006\014\007\012\001\001\000\010\005\030\006\014\007" +
    "\012\001\001\000\010\005\027\006\014\007\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\035\005\007\006\014\007\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		static int contador = 0;
		static double somatorio = 0.0;
                boolean usandoVariavel = false;

		public void imprimeRelatorio(){
				System.out.println("Foram reconhecidas e computadas:");
				System.out.println(parser.contador + " expressões");
				System.out.println("Cujo somatório foi:" + parser.somatorio);
		}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // start01 ::= expr_list 
            {
              Object RESULT =null;
		 parser.imprimeRelatorio(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start01",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= start01 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_list expr_ptv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            parser.contador++;
                            parser.somatorio += e.doubleValue();								
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= expr_ptv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            parser.contador++;
                            parser.somatorio += e.doubleValue();								
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
                    System.out.println("= " + e); 
                    RESULT = new Double(e.doubleValue());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_ptv ::= expr NT$0 PTVIRG 
            {
              Double RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_ptv",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr MAIS term 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
                    RESULT = e + t; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MENOS term 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = e - t;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= MENOS term 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = -t;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= term 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double(t.doubleValue());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= factor MULT term 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = f * t;  
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= factor DIV term 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    if(parser.usandoVariavel && t == 0){
                            System.out.println("Error - Voce informou a variavel(denomiador) igual a zero.");
                            System.out.print("Informe o valor da variavel:");
                            Scanner ler = new Scanner(System.in);
                            Double num = ler.nextDouble();		
                            t = num;
                    }
                    RESULT = new Double(f.doubleValue() / t.doubleValue());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= factor MOD term 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(f.getClass().getName() == "Double" || t.getClass().getName() == "Double"){
                        RESULT = new Integer(f % t);
                    }
                    else{
                        RESULT = f % t;
                    }
                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= factor 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double(f.doubleValue());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // factor ::= NUMBER 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new Double(n.doubleValue());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // factor ::= ABRE_PARENT expr FECHA_PARENT 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = new Double(e.doubleValue());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // factor ::= designator 
            {
              Double RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Scanner ler = new Scanner(System.in);
                        double num1;
                        System.out.print("Informe o valor da variável("+ d +"):");
                        num1 = ler.nextDouble();
                        RESULT = num1;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(e < 0){
                                                       double num1;
                                                       while(true){
                                                       System.out.println("Indice Invalido");
                                                       Scanner ler = new Scanner(System.in);
                                                       
                                                       System.out.print("Informe o valor do indice novamente:");
                                                       num1 = ler.nextDouble();
                                                       if(num1 >= 0)
                                                            break;
                                                       }
                                                       RESULT = num1;
                                                       }
                                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // designator ::= designator ABRE_COLCH expr NT$1 FECHA_COLCH 
            {
              Double RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // designator ::= designator PTO IDENT 
            {
              Double RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // designator ::= IDENT 
            {
              Double RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 usandoVariavel = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
