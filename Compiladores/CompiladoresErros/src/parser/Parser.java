
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 16 05:25:30 BRT 2023
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import erros.ListaErros;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 16 05:25:30 BRT 2023
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\015\003\000\002\002\004\000\002\015" +
    "\003\000\002\015\003\000\002\011\012\000\002\017\002" +
    "\000\002\011\005\000\002\016\006\000\002\016\002\000" +
    "\002\013\013\000\002\020\002\000\002\013\005\000\002" +
    "\014\011\000\002\021\002\000\002\014\005\000\002\010" +
    "\005\000\002\010\003\000\002\002\004\000\002\002\003" +
    "\000\002\003\004\000\002\003\003\000\002\004\005\000" +
    "\002\004\005\000\002\004\004\000\002\004\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\003\000\002\005" +
    "\003\000\002\005\005\000\002\005\003\000\002\007\006" +
    "\000\002\007\005\000\002\007\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\012\003\006\020\007\022\013\023\005\001" +
    "\002\000\004\002\uffff\001\002\000\004\024\115\001\002" +
    "\000\010\013\ufff7\026\ufffc\027\ufff4\001\002\000\004\024" +
    "\074\001\002\000\004\002\073\001\002\000\004\002\001" +
    "\001\002\000\004\002\ufffe\001\002\000\004\026\014\001" +
    "\002\000\014\003\026\012\015\015\016\024\023\033\021" +
    "\001\002\000\042\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\025\uffe0\030\uffe0\031\uffe0\032\uffe0\001\002\000" +
    "\010\012\015\024\023\033\021\001\002\000\032\003\uffe9" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\025\uffe9\031\uffe9\001\002\000\016" +
    "\003\026\012\015\015\016\024\023\027\050\033\021\001" +
    "\002\000\036\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\025\uffe5\031\uffe5\001\002\000\042\003\uffe3\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\025\uffe3\030\043\031\uffe3" +
    "\032\044\001\002\000\012\012\015\015\016\024\023\033" +
    "\021\001\002\000\016\003\uffef\012\uffef\015\uffef\024\uffef" +
    "\027\uffef\033\uffef\001\002\000\036\003\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\035\017\036\025\uffe6\031\uffe6\001\002\000" +
    "\016\003\uffed\012\uffed\015\uffed\024\uffed\027\uffed\033\uffed" +
    "\001\002\000\010\013\031\014\030\015\032\001\002\000" +
    "\010\012\015\024\023\033\021\001\002\000\016\003\uffee" +
    "\012\uffee\015\uffee\024\uffee\027\uffee\033\uffee\001\002\000" +
    "\010\012\015\024\023\033\021\001\002\000\032\003\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\025\uffeb\031\uffeb\001\002\000\032" +
    "\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\013\uffec\014\uffec\015\uffec\025\uffec\031\uffec\001\002" +
    "\000\010\012\015\024\023\033\021\001\002\000\010\012" +
    "\015\024\023\033\021\001\002\000\032\003\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\025\uffe7\031\uffe7\001\002\000\032\003\uffe8" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\025\uffe8\031\uffe8\001\002\000\010" +
    "\014\030\015\032\025\042\001\002\000\036\003\uffe4\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\025\uffe4\031\uffe4\001" +
    "\002\000\012\012\015\015\016\024\023\033\021\001\002" +
    "\000\004\012\045\001\002\000\042\003\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\025\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\001\002\000\010\014\030\015\032\031\047\001\002" +
    "\000\042\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\025\uffe2\030\uffe2\031\uffe2\032\uffe2\001\002\000\004\023" +
    "\052\001\002\000\016\003\ufff0\012\ufff0\015\ufff0\024\ufff0" +
    "\027\ufff0\033\ufff0\001\002\000\004\024\053\001\002\000" +
    "\014\003\054\012\015\015\016\024\023\033\021\001\002" +
    "\000\004\025\ufff1\001\002\000\024\003\067\004\062\005" +
    "\063\006\065\007\061\010\066\011\064\014\030\015\032" +
    "\001\002\000\004\025\057\001\002\000\004\013\060\001" +
    "\002\000\004\002\ufff8\001\002\000\012\012\uffdc\015\uffdc" +
    "\024\uffdc\033\uffdc\001\002\000\012\012\uffdf\015\uffdf\024" +
    "\uffdf\033\uffdf\001\002\000\012\012\uffde\015\uffde\024\uffde" +
    "\033\uffde\001\002\000\012\012\uffda\015\uffda\024\uffda\033" +
    "\uffda\001\002\000\012\012\uffdd\015\uffdd\024\uffdd\033\uffdd" +
    "\001\002\000\012\012\uffdb\015\uffdb\024\uffdb\033\uffdb\001" +
    "\002\000\012\012\uffd9\015\uffd9\024\uffd9\033\uffd9\001\002" +
    "\000\012\012\015\015\016\024\023\033\021\001\002\000" +
    "\010\014\030\015\032\025\ufff2\001\002\000\032\003\uffea" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013" +
    "\uffea\014\uffea\015\uffea\025\uffea\031\uffea\001\002\000\004" +
    "\002\000\001\002\000\014\003\054\012\015\015\016\024" +
    "\023\033\021\001\002\000\004\025\076\001\002\000\004" +
    "\026\077\001\002\000\014\003\026\012\015\015\016\024" +
    "\023\033\021\001\002\000\016\003\026\012\015\015\016" +
    "\024\023\027\101\033\021\001\002\000\006\002\ufff9\021" +
    "\102\001\002\000\004\026\104\001\002\000\004\002\ufffd" +
    "\001\002\000\014\003\026\012\015\015\016\024\023\033" +
    "\021\001\002\000\016\003\026\012\015\015\016\024\023" +
    "\027\106\033\021\001\002\000\004\002\ufffa\001\002\000" +
    "\004\027\114\001\002\000\004\013\113\001\002\000\004" +
    "\026\112\001\002\000\004\002\ufffb\001\002\000\004\002" +
    "\ufff6\001\002\000\004\002\ufff3\001\002\000\014\003\054" +
    "\012\015\015\016\024\023\033\021\001\002\000\004\025" +
    "\117\001\002\000\004\026\120\001\002\000\014\003\026" +
    "\012\015\015\016\024\023\033\021\001\002\000\016\003" +
    "\026\012\015\015\016\024\023\027\122\033\021\001\002" +
    "\000\004\002\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\012\011\010\013\003\014\011\015\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\110" +
    "\020\107\021\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\017\003\023\004\026\005\024\006\016\007" +
    "\021\001\001\000\002\001\001\000\010\005\024\006\071" +
    "\007\021\001\001\000\002\001\001\000\014\003\050\004" +
    "\026\005\024\006\016\007\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\040\005\024\006\016\007" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\024\006\033\007" +
    "\021\001\001\000\002\001\001\000\010\005\024\006\032" +
    "\007\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\024\006\037\007\021\001\001\000\010\005\024" +
    "\006\036\007\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\045" +
    "\005\024\006\016\007\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\054\005\024\006\016\007\021\010\055\001\001\000\002" +
    "\001\001\000\004\012\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\070" +
    "\005\024\006\016\007\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\054\005\024" +
    "\006\016\007\021\010\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\077\003\023\004\026\005\024" +
    "\006\016\007\021\001\001\000\014\003\050\004\026\005" +
    "\024\006\016\007\021\001\001\000\004\016\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\104\003" +
    "\023\004\026\005\024\006\016\007\021\001\001\000\014" +
    "\003\050\004\026\005\024\006\016\007\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\054\005\024\006\016\007\021\010\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\120\003\023\004\026\005\024\006\016\007\021\001\001" +
    "\000\014\003\050\004\026\005\024\006\016\007\021\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    

    //chamada pelo proprio PARSER quando encontra um error
	public void syntax_error(Symbol s){    
        this.defineErro(s.left, s.right);   
        //s.left retorna a linha
        //s.right retorna a coluna             
	}	

    public void unrecovered_syntax_error(Symbol cur_token){


    }

    public void defineErro(int linha, int coluna, String texto)
	{   // Forma de acessar o Analisador Léxico da classe Parser 
            // É necessário o casting >>> (scanner.Scanner) this.getScanner()
            //pois o scanner da classe Parser é o do pacote java_cup.runtime.Scanner, 
            //portanto, é obrigatório fazer este casting aqui e toda vez que quisermos acessar o Yylex 
            scanner.Scanner sc = (scanner.Scanner) this.getScanner();  
            sc.defineErro(linha, coluna, texto);
	}		

    //usado pelo método syntax_error()
    public void defineErro(int linha, int coluna){   
            scanner.Scanner sc = (scanner.Scanner) this.getScanner();  
            sc.defineErro(linha, coluna);
	}

    //usado para completar o texto daqueles erros adicionados pelo método syntax_error()
	public void defineErro(String texto){  
            scanner.Scanner sc = (scanner.Scanner) this.getScanner();  
            sc.defineErro(texto);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op_Relacional ::= error 
            {
              Double RESULT =null;
		 
                    parser.defineErro("Operador relacional desconhecido");  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_Relacional",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_Relacional ::= DIF 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_Relacional",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op_Relacional ::= IGUALIGUAL 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_Relacional",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op_Relacional ::= MENORIGUAL 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_Relacional",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_Relacional ::= MAIORIGUAL 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_Relacional",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op_Relacional ::= MENOR 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_Relacional",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_Relacional ::= MAIOR 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_Relacional",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // designator ::= IDENT 
            {
              Double RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new Double(1.0);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // designator ::= designator PONTO IDENT 
            {
              Double RESULT =null;
		
                    RESULT = new Double(1.0);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // designator ::= designator ABRECOLCH expr FECHACOLCH 
            {
              Double RESULT =null;
		
                    RESULT = new Double(1.0);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= designator 
            {
              Double RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new Double(d.doubleValue());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= ABREPAR expr FECHAPAR 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new Double(e.doubleValue());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= NUMBER 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                    RESULT = n; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // term ::= factor 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term ::= factor DIV term 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                    if(t == 0){
                        parser.defineErro(tleft, tright, "Error: Divisao por zero."); 
                    }
                    RESULT = f/t;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term ::= factor MULT term 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new Double(f.doubleValue() * t.doubleValue());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= term 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new Double(t.doubleValue());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= MENOS term 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = -t;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr MENOS term 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = e - t;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr MAIS term 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new Double(e.doubleValue() + t.doubleValue());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr_ptv ::= error 
            {
              Double RESULT =null;
		 parser.defineErro("Expressao incompleta"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_ptv",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr_ptv ::= expr PTVIRG 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_ptv",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr_list ::= expr_ptv 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr_list ::= expr_list expr_ptv 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condicao ::= error 
            {
              Double RESULT =null;
		 parser.defineErro("Condicao com erro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicao",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condicao ::= expr op_Relacional expr 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicao",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // while ::= error NT$2 FECHACHAVE 
            {
              Double RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Double) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$2 ::= 
            {
              Double RESULT =null;
 parser.defineErro("While com erro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // while ::= KW_WHILE ABREPAR condicao FECHAPAR ABRECHAVE expr_list FECHACHAVE 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // do ::= error NT$1 PTVIRG 
            {
              Double RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Double) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Double RESULT =null;
 parser.defineErro("Do com erro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // do ::= KW_DO ABRECHAVE expr_list FECHACHAVE KW_WHILE ABREPAR condicao FECHAPAR PTVIRG 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // else ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // else ::= KW_ELSE ABRECHAVE expr_list FECHACHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // if ::= error NT$0 ABRECHAVE 
            {
              Double RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Double) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Double RESULT =null;
 parser.defineErro("IF com erro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // if ::= KW_IF ABREPAR condicao FECHAPAR ABRECHAVE expr_list FECHACHAVE else 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= while 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement ::= do 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= statement EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double start_val = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // statement ::= if 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

